apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-mirror-setup-pull-secret
  namespace: oc-mirror-pipeline
  labels:
    app.kubernetes.io/name: oc-mirror-task
    autoshift.io/component: oc-mirror
spec:
  description: |
    Sets up the pull secret for oc-mirror from a Kubernetes secret.
    Expects a secret named 'oc-mirror-pull-secret' in the openshift-pipelines namespace.
  params:
    - name: pull-secret-name
      type: string
      default: "oc-mirror-pull-secret"
      description: "Name of the Kubernetes secret containing the pull secret"
    - name: pull-secret-namespace
      type: string
      default: "oc-mirror-pipeline"
      description: "Namespace containing the pull secret"
  workspaces:
    - name: source
      description: "Source code workspace"
  steps:
    - name: setup-pull-secret
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "üîç Setting up pull secret for oc-mirror..."
        
        cd $(workspaces.source.path)
        
        # Check if the secret exists
        if ! oc get secret $(params.pull-secret-name) -n $(params.pull-secret-namespace) >/dev/null 2>&1; then
          echo "‚ùå Secret $(params.pull-secret-name) not found in namespace $(params.pull-secret-namespace)"
          echo ""
          echo "üìù Create the secret manually with:"
          echo "oc create secret generic $(params.pull-secret-name) \\"
          echo "  --from-file=.dockerconfigjson=/path/to/pull-secret.json \\"
          echo "  --type=kubernetes.io/dockerconfigjson \\"
          echo "  -n $(params.pull-secret-namespace)"
          echo ""
          echo "Or download your pull secret from https://console.redhat.com/openshift/install/pull-secret"
          exit 1
        fi
        
        echo "‚úÖ Found secret $(params.pull-secret-name)"
        
        # Extract the pull secret to a file
        oc get secret $(params.pull-secret-name) -n $(params.pull-secret-namespace) \
          -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d > pull-secret.txt
        
        # Validate JSON format
        if python3 -m json.tool pull-secret.txt > /dev/null 2>&1; then
          echo "‚úÖ Pull secret is valid JSON"
        else
          echo "‚ùå Pull secret is not valid JSON"
          exit 1
        fi
        
        # Check for required auth sections
        REQUIRED_AUTHS=("cloud.openshift.com" "quay.io" "registry.redhat.io")
        for auth in "${REQUIRED_AUTHS[@]}"; do
          if python3 -c "import json,sys; data=json.load(open('pull-secret.txt')); sys.exit(0 if '$auth' in data.get('auths', {}) else 1)" 2>/dev/null; then
            echo "‚úÖ Found auth for $auth"
          else
            echo "‚ö†Ô∏è  Missing auth for $auth (may be required for full mirroring)"
          fi
        done
        
        # Set permissions
        chmod 600 pull-secret.txt
        
        echo "‚úÖ Pull secret setup complete"