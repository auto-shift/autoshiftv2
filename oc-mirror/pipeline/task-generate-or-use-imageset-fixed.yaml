apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-or-use-imageset
  namespace: oc-mirror-pipeline
  labels:
    app.kubernetes.io/name: oc-mirror-task
    autoshift.io/component: oc-mirror
spec:
  description: |
    Generates ImageSet configuration from AutoShift values file or uses existing ConfigMap.
    Supports dynamic generation with parameters or using pre-configured ImageSets.
  params:
    - name: values-file-path
      type: string
      description: "Path to AutoShift values file in workspace"
    - name: imageset-configmap
      type: string
      default: ""
      description: "Optional: existing ConfigMap with ImageSet configuration"
    - name: openshift-version
      type: string
      default: ""
      description: "Optional: override OpenShift version"
    - name: operators-only
      type: string
      default: "false"
      description: "Generate operators-only ImageSet (true/false)"
    - name: namespace
      type: string
      default: "oc-mirror"
      description: "Target namespace"
  results:
    - name: IMAGESET_FILE
      description: "Path to generated or retrieved ImageSet file"
    - name: GENERATION_METHOD
      description: "How ImageSet was obtained: generated or configmap"
  workspaces:
    - name: workspace
      description: "Workspace containing values files and for ImageSet output"
  steps:
    - name: generate-or-use-imageset
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      workingDir: $(workspaces.workspace.path)
      script: |
        #!/bin/bash
        set -e

        echo "🔧 Processing ImageSet configuration..."

        IMAGESET_FILE="imageset-config.yaml"
        GENERATION_METHOD=""

        # Check if existing ConfigMap should be used
        if [[ -n "$(params.imageset-configmap)" ]]; then
          echo "📋 Using existing ImageSet ConfigMap: $(params.imageset-configmap)"

          # Retrieve ImageSet from ConfigMap
          if oc get configmap $(params.imageset-configmap) -n $(params.namespace) >/dev/null 2>&1; then
            oc get configmap $(params.imageset-configmap) -n $(params.namespace) \
              -o jsonpath='{.data.imageset\.yaml}' > $IMAGESET_FILE

            echo "✅ Retrieved ImageSet from ConfigMap"
            GENERATION_METHOD="configmap"
          else
            echo "❌ ERROR: ConfigMap $(params.imageset-configmap) not found in namespace $(params.namespace)"
            exit 1
          fi

        else
          echo "🔄 Creating basic ImageSet configuration for testing..."
          echo "⚠️  Note: For production, use the full oc-mirror container with generate-imageset-config.sh"

          # Create a basic ImageSet configuration for operators-only
          if [[ "$(params.operators-only)" == "true" ]]; then
            cat > $IMAGESET_FILE << 'IMAGESET_EOF'
kind: ImageSetConfiguration
apiVersion: mirror.openshift.io/v1alpha2
storageConfig:
  registry:
    imageURL: localhost:5000/metadata:latest
mirror:
  operators:
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.18
    packages:
    - name: advanced-cluster-security
    - name: rhacs-operator
    - name: compliance-operator
IMAGESET_EOF
          else
            cat > $IMAGESET_FILE << 'IMAGESET_EOF'
kind: ImageSetConfiguration
apiVersion: mirror.openshift.io/v1alpha2
storageConfig:
  registry:
    imageURL: localhost:5000/metadata:latest
mirror:
  platform:
    channels:
    - name: stable-4.18
      minVersion: 4.18.0
      maxVersion: 4.18.22
  operators:
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.18
    packages:
    - name: advanced-cluster-security
    - name: rhacs-operator
    - name: compliance-operator
IMAGESET_EOF
          fi

          echo "✅ Generated basic ImageSet configuration"
          GENERATION_METHOD="generated"
        fi

        # Validate ImageSet file exists and has content
        if [[ ! -f "$IMAGESET_FILE" ]]; then
          echo "❌ ERROR: ImageSet file not found: $IMAGESET_FILE"
          exit 1
        fi

        if [[ ! -s "$IMAGESET_FILE" ]]; then
          echo "❌ ERROR: ImageSet file is empty: $IMAGESET_FILE"
          exit 1
        fi

        # Display ImageSet summary
        echo "📊 ImageSet Configuration Summary:"
        echo "   File: $IMAGESET_FILE"
        echo "   Size: $(wc -l < $IMAGESET_FILE) lines"
        echo "   Method: $GENERATION_METHOD"

        echo "📄 ImageSet Content:"
        cat $IMAGESET_FILE

        # Set results
        echo -n "$IMAGESET_FILE" > $(results.IMAGESET_FILE.path)
        echo -n "$GENERATION_METHOD" > $(results.GENERATION_METHOD.path)

        echo "✅ ImageSet configuration ready for deployment"