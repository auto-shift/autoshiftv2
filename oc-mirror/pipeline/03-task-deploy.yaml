apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-mirror-deploy
  namespace: oc-mirror-pipeline
  labels:
    app.kubernetes.io/name: oc-mirror-task
    autoshift.io/component: oc-mirror
spec:
  description: |
    Deploys the oc-mirror container as a Job, CronJob, or Deployment based on the deploy-mode parameter.
    Creates necessary PVCs, ConfigMaps, and Secrets for oc-mirror operation.
  params:
    - name: image
      type: string
      description: "Container image to deploy"
    - name: values-file
      type: string
      default: "values.hub.yaml"
      description: "AutoShift values file to use"
    - name: deploy-mode
      type: string
      default: "job"
      description: "Deployment mode: job, cronjob, or deployment"
    - name: schedule
      type: string
      default: "0 2 * * 0"
      description: "Cron schedule for CronJob"
    - name: workflow
      type: string
      default: "workflow-to-disk"
      description: "oc-mirror workflow to execute: mirror-to-mirror, mirror-to-disk, disk-to-mirror"
    - name: imageset-config
      type: string
      default: "test-imageset.yaml"
      description: "ImageSet configuration file to use"
  workspaces:
    - name: source
      description: "Source code workspace"
  steps:
    - name: create-resources
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "🚀 Deploying oc-mirror in $(params.deploy-mode) mode..."
        
        # Create namespace if it doesn't exist
        oc create namespace oc-mirror --dry-run=client -o yaml | oc apply -f -
        
        # Create PVC for mirror data if it doesn't exist
        cat << EOF | oc apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: oc-mirror-data
          namespace: oc-mirror
          labels:
            app.kubernetes.io/name: oc-mirror
            autoshift.io/component: oc-mirror
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 100Gi
          storageClassName: gp3-csi
        EOF
        
        # Create ConfigMap with values file and imageset config
        oc create configmap oc-mirror-config \
          --from-file=values.yaml=$(workspaces.source.path)/source/autoshift/$(params.values-file) \
          --from-file=imageset.yaml=$(workspaces.source.path)/source/oc-mirror/$(params.imageset-config) \
          --namespace=oc-mirror \
          --dry-run=client -o yaml | oc apply -f -
        
        # Copy pull secret from oc-mirror-pipeline namespace to oc-mirror namespace
        if ! oc get secret oc-mirror-pull-secret -n oc-mirror-pipeline >/dev/null 2>&1; then
          echo "❌ Pull secret not found in oc-mirror-pipeline namespace"
          echo "📝 Create it manually first in oc-mirror-pipeline namespace"
          exit 1
        fi
        
        echo "✅ Found pull secret in oc-mirror-pipeline namespace, copying to oc-mirror namespace..."
        if ! oc get secret oc-mirror-pull-secret -n oc-mirror >/dev/null 2>&1; then
          oc get secret oc-mirror-pull-secret -n oc-mirror-pipeline -o yaml | \
            sed 's/namespace: oc-mirror-pipeline/namespace: oc-mirror/' | \
            oc apply -f -
        else
          echo "✅ Pull secret already exists in oc-mirror namespace"
        fi
        
        # Copy quay registry auth secret
        if ! oc get secret quay-registry-auth -n oc-mirror >/dev/null 2>&1; then
          oc get secret quay-registry-auth -n oc-mirror-pipeline -o yaml | \
            sed 's/namespace: oc-mirror-pipeline/namespace: oc-mirror/' | \
            oc apply -f -
          echo "✅ Copied quay-registry-auth secret to oc-mirror namespace"
        else
          echo "✅ Quay registry auth secret already exists in oc-mirror namespace"
        fi
        
        # Copy quayadmin secret for registry authentication
        if ! oc get secret quayadmin -n oc-mirror >/dev/null 2>&1; then
          oc get secret quayadmin -n quay-enterprise -o yaml | \
            sed 's/namespace: quay-enterprise/namespace: oc-mirror/' | \
            oc apply -f -
          echo "✅ Copied quayadmin secret to oc-mirror namespace"
        else
          echo "✅ Quayadmin secret already exists in oc-mirror namespace"
        fi
        
        # Deploy based on mode
        case "$(params.deploy-mode)" in
          "job")
            echo "📋 Creating Job for one-time execution..."
            cat << EOF | oc apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: oc-mirror-job-$(date +%Y%m%d-%H%M%S)
          namespace: oc-mirror
          labels:
            app.kubernetes.io/name: oc-mirror
            autoshift.io/component: oc-mirror
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/name: oc-mirror
                autoshift.io/component: oc-mirror
            spec:
              restartPolicy: Never
              imagePullSecrets:
                - name: quay-registry-auth
              containers:
                - name: oc-mirror
                  image: $(params.image)
                  command: ["/workspace/autoshift-entrypoint.sh"]
                  args: ["$(params.workflow)", "--values-file", "/config/values.yaml"]
                  env:
                    - name: XDG_RUNTIME_DIR
                      value: "/workspace"
                    - name: HOME
                      value: "/workspace"
                    - name: QUAY_USERNAME
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: basic
                    - name: QUAY_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: password
                    - name: QUAY_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: token
                  volumeMounts:
                    - name: mirror-data
                      mountPath: /workspace/content
                    - name: config
                      mountPath: /config
                    - name: pull-secret
                      mountPath: /workspace/pull-secret.txt
                      subPath: .dockerconfigjson
                  resources:
                    requests:
                      memory: "2Gi"
                      cpu: "500m"
                    limits:
                      memory: "8Gi"
                      cpu: "2"
              volumes:
                - name: mirror-data
                  persistentVolumeClaim:
                    claimName: oc-mirror-data
                - name: config
                  configMap:
                    name: oc-mirror-config
                - name: pull-secret
                  secret:
                    secretName: oc-mirror-pull-secret
        EOF
            ;;
            
          "cronjob")
            echo "⏰ Creating CronJob for scheduled execution..."
            cat << EOF | oc apply -f -
        apiVersion: batch/v1
        kind: CronJob
        metadata:
          name: oc-mirror-cronjob
          namespace: oc-mirror
          labels:
            app.kubernetes.io/name: oc-mirror
            autoshift.io/component: oc-mirror
        spec:
          schedule: "$(params.schedule)"
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: oc-mirror
                    autoshift.io/component: oc-mirror
                spec:
                  restartPolicy: Never
                  imagePullSecrets:
                    - name: quay-registry-auth
                  containers:
                    - name: oc-mirror
                      image: $(params.image)
                      command: ["/workspace/autoshift-entrypoint.sh"]
                      args: ["$(params.workflow)", "--values-file", "/config/values.yaml"]
                      env:
                        - name: XDG_RUNTIME_DIR
                          value: "/workspace"
                        - name: HOME
                          value: "/workspace"
                      volumeMounts:
                        - name: mirror-data
                          mountPath: /workspace/content
                        - name: config
                          mountPath: /config
                        - name: pull-secret
                          mountPath: /workspace/pull-secret.txt
                          subPath: .dockerconfigjson
                      resources:
                        requests:
                          memory: "2Gi"
                          cpu: "500m"
                        limits:
                          memory: "8Gi"
                          cpu: "2"
                  volumes:
                    - name: mirror-data
                      persistentVolumeClaim:
                        claimName: oc-mirror-data
                    - name: config
                      configMap:
                        name: oc-mirror-config
                    - name: pull-secret
                      secret:
                        secretName: oc-mirror-pull-secret
        EOF
            ;;
            
          "deployment")
            echo "🔄 Creating Deployment for persistent service..."
            cat << EOF | oc apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: oc-mirror-deployment
          namespace: oc-mirror
          labels:
            app.kubernetes.io/name: oc-mirror
            autoshift.io/component: oc-mirror
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/name: oc-mirror
              autoshift.io/component: oc-mirror
          template:
            metadata:
              labels:
                app.kubernetes.io/name: oc-mirror
                autoshift.io/component: oc-mirror
            spec:
              imagePullSecrets:
                - name: quay-registry-auth
              containers:
                - name: oc-mirror
                  image: $(params.image)
                  command: ["/bin/bash"]
                  args: ["-c", "while true; do sleep 3600; done"]
                  env:
                    - name: XDG_RUNTIME_DIR
                      value: "/workspace"
                    - name: HOME
                      value: "/workspace"
                    - name: QUAY_USERNAME
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: basic
                    - name: QUAY_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: password
                    - name: QUAY_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: quayadmin
                          key: token
                  volumeMounts:
                    - name: mirror-data
                      mountPath: /workspace/content
                    - name: config
                      mountPath: /config
                    - name: pull-secret
                      mountPath: /workspace/pull-secret.txt
                      subPath: .dockerconfigjson
                  resources:
                    requests:
                      memory: "1Gi"
                      cpu: "250m"
                    limits:
                      memory: "4Gi"
                      cpu: "2"
              volumes:
                - name: mirror-data
                  persistentVolumeClaim:
                    claimName: oc-mirror-data
                - name: config
                  configMap:
                    name: oc-mirror-config
                - name: pull-secret
                  secret:
                    secretName: oc-mirror-pull-secret
        EOF
            ;;
            
          *)
            echo "❌ Invalid deploy-mode: $(params.deploy-mode)"
            echo "Valid options: job, cronjob, deployment"
            exit 1
            ;;
        esac
        
        echo "✅ oc-mirror deployed successfully in $(params.deploy-mode) mode"
        
        # Show deployed resources
        echo ""
        echo "📋 Deployed Resources:"
        oc get all,pvc,cm,secret -n oc-mirror -l app.kubernetes.io/name=oc-mirror